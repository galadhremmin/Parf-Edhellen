Glaemscribe.resource_manager.raw_modes["blackspeech"] = "\\**\n\nGlǽmscribe (also written Glaemscribe) is a software dedicated to\nthe transcription of texts between writing systems, and more \nspecifically dedicated to the transcription of J.R.R. Tolkien\'s \ninvented languages to some of his devised writing systems.\n\nCopyright (C) 2015 Benjamin Babut (Talagan).\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\nany later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n**\\\n\n\\** BlackSpeech ring mode for glaemscribe (MAY BE INCOMPLETE) **\\\n\n\\beg changelog\n  \\entry 0.0.1 \"First version\"\n  \\entry 0.0.2 \"Ported to virtual chars.\"\n  \\entry 0.0.3 \"Merging with blackspeech Annatar\".\n  \\entry 0.0.4 \"Adding double tehtar handling.\"\n  \\entry 0.0.5 \"Fixing ORE/ROMEN, refactoring.\"\n  \\entry 0.0.6 \"Added support for the FreeMonoTengwar font\"\n  \\entry \"0.1.0\" \"Added support for the Tengwar Elfica font\"\n\\end\n\n\\language \"Black Speech\"\n\\writing  \"Tengwar\"\n\\mode     \"General Use\"\n\\version  \"0.1.0\"\n\\authors  \"J.R.R. Tolkien, impl. Talagan (Benjamin Babut)\"\n \n\\charset  tengwar_ds_sindarin false\n\\charset  tengwar_ds_parmaite false\n\\charset  tengwar_ds_eldamar  false\n\\charset  tengwar_ds_annatar  true\n\\charset  tengwar_ds_elfica   false\n\\charset  tengwar_freemono    false\n\n\\beg      options\n\n  \\beg option reverse_o_u_tehtar O_UP_U_DOWN\n    \\value O_UP_U_DOWN 1\n    \\value U_UP_O_DOWN 2\n  \\end\n\n  \\beg option long_vowels_format LONG_VOWELS_USE_DOUBLE_TEHTAR\n    \\value LONG_VOWELS_USE_LONG_CARRIER 1\n    \\value LONG_VOWELS_USE_DOUBLE_TEHTAR 2\n  \\end  \n  \n  \\beg option double_tehta_e true\n    \\visible_when \'long_vowels_format == LONG_VOWELS_USE_DOUBLE_TEHTAR\'\n  \\end\n  \\beg option double_tehta_i true\n    \\visible_when \'long_vowels_format == LONG_VOWELS_USE_DOUBLE_TEHTAR\'\n  \\end\n  \\beg option double_tehta_o true\n    \\visible_when \'long_vowels_format == LONG_VOWELS_USE_DOUBLE_TEHTAR\'\n  \\end\n  \\beg option double_tehta_u true\n    \\visible_when \'long_vowels_format == LONG_VOWELS_USE_DOUBLE_TEHTAR\'\n  \\end\n  \n  \\beg option consonant_modification_style CONSONANT_MODIFICATION_STYLE_WAVE\n    \\value CONSONANT_MODIFICATION_STYLE_WAVE 0\n    \\value CONSONANT_MODIFICATION_STYLE_BAR 1\n  \\end\n  \n  \\option reverse_numbers true\n  \\beg option numbers_base BASE_12\n    \\value    BASE_10 10\n    \\value    BASE_12 12\n  \\end\n\\end\n\n\\beg      preprocessor\n  \\** Work exclusively downcase **\\\n  \\downcase\n  \n  \\** Simplify trema vowels **\\\n  \\substitute \"ä\" \"a\"\n  \\substitute \"ë\" \"e\"\n  \\substitute \"ï\" \"i\"\n  \\substitute \"ö\" \"o\"\n  \\substitute \"ü\" \"u\"\n  \\substitute \"ÿ\" \"y\"\n\n  \\** Dis-ambiguate long vowels **\\\n  \\rxsubstitute \"(ā|â|aa)\" \"á\"\n  \\rxsubstitute \"(ē|ê|ee)\" \"é\"\n  \\rxsubstitute \"(ī|î|ii)\" \"í\"\n  \\rxsubstitute \"(ō|ô|oo)\" \"ó\"\n  \\rxsubstitute \"(ū|û|uu)\" \"ú\"\n\n  \\** For ORE/ROMEN **\\\n  \\rxsubstitute \"r(a|e|i|o|u|á|é|í|ó|ú)\" \"R\\\\1\"\n\n  \\** Preprocess numbers **\\\n  \\elvish_numbers \"\\\\eval numbers_base\" \"\\\\eval reverse_numbers\"\n\\end\n\n\\beg      processor\n\n  \\beg    rules litteral\n     \n    {K}                 === (c,k)\n    \n    \\if \"consonant_modification_style == CONSONANT_MODIFICATION_STYLE_WAVE\"\n      {GEMINATE} === GEMINATE_SIGN_TILD\n      {NASAL}    === NASALIZE_SIGN_TILD\n    \\else\n      {GEMINATE} === GEMINATE_SIGN\n      {NASAL}    === NASALIZE_SIGN\n    \\endif\n    \n    {VOWELS}            === a               *  e              * i              * o              *  u\n    {LVOWELS}           === á               *  é              * í              * ó              *  ú\n    \n    \\if \"reverse_o_u_tehtar == U_UP_O_DOWN\"\n      {O_LOOP}        === O_TEHTA\n      {O_LOOP_DOUBLE} === O_TEHTA_DOUBLE\n      {U_LOOP}        === U_TEHTA\n      {U_LOOP_DOUBLE} === U_TEHTA_DOUBLE\n    \\else\n      {O_LOOP}        === U_TEHTA\n      {O_LOOP_DOUBLE} === U_TEHTA_DOUBLE\n      {U_LOOP}        === O_TEHTA\n      {U_LOOP_DOUBLE} === O_TEHTA_DOUBLE\n    \\endif   \n       \n    {_TEHTAR_}          === A_TEHTA         * E_TEHTA         * I_TEHTA       *  {O_LOOP}  * {U_LOOP}      \n     \n    {DIPHTHONGS}        === ai              * au              * oi          \n    {_DIPHTHONGS_}      === YANTA A_TEHTA   * URE A_TEHTA     * YANTA {O_LOOP}  \n    {WDIPHTHONGS}       === * {DIPHTHONGS}\n    {_WDIPHTHONGS_}     === * {_DIPHTHONGS_}\n      \n		{WLONG}     === {NULL} \\** long vowels that can be used as tehtar **\\\n    {_WLONG_}   === {NULL} \\** tehtar of long vowels that can be used as tehtar **\\\n		\n		{_LONG_A_}      === ARA A_TEHTA\n		{_LONG_E_}      === ARA E_TEHTA	\n		{_LONG_I_}      === ARA I_TEHTA\n		{_LONG_O_}      === ARA {O_LOOP}	\n		{_LONG_U_}      === ARA {U_LOOP}\n		{_LONE_LONG_A_} === {_LONG_A_}\n		{_LONE_LONG_E_} === {_LONG_E_}\n		{_LONE_LONG_I_} === {_LONG_I_}\n		{_LONE_LONG_O_} === {_LONG_O_}\n		{_LONE_LONG_U_} === {_LONG_U_}\n    \n		\\if \"long_vowels_format == LONG_VOWELS_USE_DOUBLE_TEHTAR\"\n	    \\if double_tehta_e\n		    {_LONG_E_}       === E_TEHTA_DOUBLE\n		    {_LONE_LONG_E_}  === TELCO {_LONG_E_}\n				{WLONG}          === {WLONG}   * é\n        {_WLONG_}        === {_WLONG_} * {_LONG_E_}\n			\\endif\n		  \\if double_tehta_i\n		    {_LONG_I_}       === I_TEHTA_DOUBLE\n		    {_LONE_LONG_I_}  === TELCO {_LONG_I_}\n				{WLONG}          === {WLONG}   * í             \n        {_WLONG_}        === {_WLONG_} * {_LONG_I_}\n		  \\endif\n		  \\if double_tehta_o\n		    {_LONG_O_}       === {O_LOOP_DOUBLE}\n		    {_LONE_LONG_O_}  === TELCO {_LONG_O_}\n				{WLONG}          === {WLONG}   * ó             \n        {_WLONG_}        === {_WLONG_} * {_LONG_O_}\n		  \\endif\n		  \\if double_tehta_u\n		    {_LONG_U_}       === {U_LOOP_DOUBLE}\n		    {_LONE_LONG_U_}  === TELCO {_LONG_U_}\n				{WLONG}          === {WLONG}   * ú            \n        {_WLONG_}        === {_WLONG_} * {_LONG_U_}\n		  \\endif\n    \\endif  \n			\n		{_LTEHTAR_}     === {_LONG_A_} * {_LONG_E_} * {_LONG_I_} * {_LONG_O_} * {_LONG_U_}\n         \n    {V_D}           === [ {VOWELS} {WLONG}  ]\n    {V_D_WN}        === [ {VOWELS} {WLONG} * {NULL} ]\n\n    {_V_D_}         === [ {_TEHTAR_} {_WLONG_} ]\n    {_V_D_WN_}      === [ {_TEHTAR_} {_WLONG_} * {NULL} ]\n		\n		\\** LONE SHORT VOWELS **\\\n    [{VOWELS}]    --> TELCO [{_TEHTAR_}]  \\** Replace isolated short vowels **\\\n    \n		\\** LONE LONG VOWELS **\\	\n		[{LVOWELS}]   --> [{_LONE_LONG_A_} * {_LONE_LONG_E_} * {_LONE_LONG_I_} * {_LONE_LONG_O_} * {_LONE_LONG_U_}]\n    \n    [{DIPHTHONGS}] -->   [{_DIPHTHONGS_}]     \\**  Replace diphthongs **\\\n    \n    \\** ========================= **\\\n    \n    {V_D_WN}p     --> PARMA {_V_D_WN_}\n    {V_D_WN}t     --> TINCO {_V_D_WN_}\n    {V_D_WN}{K}   --> QUESSE {_V_D_WN_}\n  \n    {V_D_WN} b  --> UMBAR {_V_D_WN_}\n    {V_D_WN} d  --> ANDO {_V_D_WN_}\n    {V_D_WN} f  --> FORMEN_EXT {_V_D_WN_} \\** Beware. **\\ \n    {V_D_WN} g  --> UNGWE {_V_D_WN_}\n    {V_D_WN} gh --> UNGWE_EXT {_V_D_WN_}\n    {V_D_WN} h  --> HYARMEN {_V_D_WN_}\n\n    \\** ======================== **\\\n\n    {K}h          --> HWESTA\n    {V_D}{K}h     --> HWESTA_EXT {_V_D_} \\** Take care. **\\  \n\n    \\** ======================== **\\\n\n    {V_D_WN} l  --> LAMBE {_V_D_WN_} \n\n    \\** ======================== **\\\n\n    {V_D_WN} m  --> MALTA {_V_D_WN_}\n    {V_D_WN} mb --> UMBAR {NASAL} {_V_D_WN_}\n    {V_D_WN} mp --> PARMA {NASAL} {_V_D_WN_}\n\n    \\** ======================== **\\\n    \n    {V_D_WN}n   --> NUMEN {_V_D_WN_} \n    {V_D_WN}n{K}  --> QUESSE {NASAL} {_V_D_WN_} \n\n    \\** ======================== **\\\n    \n    \\** ROMEN / ORE handling probably not accurate **\\\n    {V_D_WN}r   --> ORE   {_V_D_WN_}\n    {V_D_WN}R   --> ROMEN {_V_D_WN_}\n    \n    \\** ======================== **\\\n\n    s             --> SILME\n    {V_D} s       --> SILME_NUQUERNA {_V_D_}\n    z             --> ESSE    \n    {V_D} z       --> ESSE_NUQUERNA {_V_D_}\n\n    \\** ======================== **\\\n\n    sh            --> AHA             \n    {V_D} sh      --> AHA_EXT {_V_D_} \\** BEWARE. **\\\n    \n\n    th            --> SULE\n    \n    y             --> ANNA\n\n  \\end\n  \n  \\beg rules punctuation\n    . --> PUNCT_DDOT\n    .. --> PUNCT_DOT PUNCT_DDOT PUNCT_DOT\n    …  --> PUNCT_TILD\n    ... --> PUNCT_TILD\n    .... --> PUNCT_TILD\n    ..... --> PUNCT_TILD\n    ...... --> PUNCT_TILD\n    ....... --> PUNCT_TILD\n\n    , --> PUNCT_DOT\n    : --> PUNCT_DOT\n    ; --> PUNCT_DOT\n    ! --> PUNCT_EXCLAM\n    ? --> PUNCT_INTERR\n    · --> PUNCT_DOT\n\n    \\** Apostrophe **\\\n\n    \' --> {NULL}\n    ’ --> {NULL}\n\n    \\** Quotes **\\\n\n    “ --> DQUOT_OPEN\n    ” --> DQUOT_CLOSE\n    « --> DQUOT_OPEN \n    » --> DQUOT_CLOSE \n    \n    - --> {NULL}     \n    – --> PUNCT_TILD  \n    — --> PUNCT_TILD\n    \n    [ --> PUNCT_PAREN_L\n    ] --> PUNCT_PAREN_R\n    ( --> PUNCT_PAREN_L\n    ) --> PUNCT_PAREN_R\n    { --> PUNCT_PAREN_L\n    } --> PUNCT_PAREN_R\n    < --> PUNCT_PAREN_L\n    > --> PUNCT_PAREN_R\n\n    \\** Not universal between fonts ... **\\\n    $ --> BOOKMARK_SIGN\n    ≤ --> RING_MARK_L \\** Ring inscription left beautiful stuff **\\\n    ≥ --> RING_MARK_R \\** Ring inscription right beautiful stuff **\\\n\n  \\end\n  \n  \\beg rules numbers\n    0 --> NUM_0\n    1 --> NUM_1\n    2 --> NUM_2\n    3 --> NUM_3\n    4 --> NUM_4\n    5 --> NUM_5\n    6 --> NUM_6\n    7 --> NUM_7\n    8 --> NUM_8\n    9 --> NUM_9\n    A --> NUM_10\n    B --> NUM_11      \n  \\end\n  \n\\end\n\n\\beg postprocessor\n  \\resolve_virtuals\n\\end\n"