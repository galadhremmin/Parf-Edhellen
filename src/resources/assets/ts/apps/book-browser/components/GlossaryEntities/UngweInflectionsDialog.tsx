import React, { useCallback, useState } from 'react';

import { IComponentEvent } from '@root/components/Component._types';
import Dialog from '@root/components/Dialog';
import Spinner from '@root/components/Spinner';
import StaticAlert from '@root/components/StaticAlert';
import Tengwar from '@root/components/Tengwar';
import TextIcon from '@root/components/TextIcon';

import { IUngweInflectionsResponse } from '@root/connectors/backend/IInflectionResourceApi';
import { withPropInjection } from '@root/di';
import { DI } from '@root/di/keys';

import { IProps } from './UngweInflectionsDialog._types';
import { ILexicalEntryEntity } from '@root/connectors/backend/IBookApi';

export function isEligibleForUngweInflections(lexicalEntry: ILexicalEntryEntity): boolean {
    return lexicalEntry.type === 'verb' && lexicalEntry.language?.name.toLowerCase() === 'quenya';
}

const UngweInflectionsDialog = (props: IProps) => {
    const {
        lexicalEntryId, 
        open, 
        onDismiss, 
        inflectionApi,
    } = props;

    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [inflectionData, setInflectionData] = useState<IUngweInflectionsResponse | null>(null);
    const [ungweUrl, setUngweUrl] = useState<string | null>(null);

    const _fetchInflections = useCallback(async () => {
        setLoading(true);
        setError(null);
        setInflectionData(null);
        setUngweUrl(null);

        try {
            const inflectData = await inflectionApi.ungweInflections({ lexicalEntryId });
            
            // Generate the ungweUrl from the response data
            const url = `https://ungwe.net/parne/word?verb=${inflectData.words[0].lemma}:${inflectData.words[0].homonym}`;
            setUngweUrl(url);
            setInflectionData(inflectData);
        } catch (err) {
            setError(err instanceof Error ? err.message : 'An unknown error occurred');
        } finally {
            setLoading(false);
        }
    }, [lexicalEntryId, inflectionApi]);

    // Fetch data when dialog opens
    React.useEffect(() => {
        if (open && lexicalEntryId) {
            _fetchInflections();
        }
    }, [open, lexicalEntryId, _fetchInflections]);

    const _onDialogDismiss = useCallback((e: React.MouseEvent<HTMLAnchorElement> | IComponentEvent<void>) => {
        if (typeof (e as React.MouseEvent<HTMLAnchorElement>).preventDefault === 'function') {
            (e as React.MouseEvent<HTMLAnchorElement>).preventDefault();
        }
        onDismiss();
    }, [onDismiss]);

    return (
        <Dialog
            open={open}
            onDismiss={_onDialogDismiss}
            title="Quettali Inflections"
            actionBar={false}
            size="lg"
        >
            {loading && (
                <StaticAlert type="info" className="d-flex align-items-center gap-2">
                    <Spinner />
                    <span>Fetching inflections from Quettali...</span>
                </StaticAlert>
            )}
            
            {error && (
                <StaticAlert type="warning">
                    <TextIcon icon="warning-sign" />
                    {error}
                </StaticAlert>
            )}
            
            {inflectionData && inflectionData.words.length > 0 && (
                <div>
                    <StaticAlert type="info" className="mt-0">
                        <TextIcon icon="info-sign" />{' '}
                        These inflections were generated by <a href="https://www.ungwe.net" target="_blank" rel="noreferrer">Quettali</a> using 
                        grammatical rules and patterns observed throughout the corpus, but they may not be 100% accurate. 
                        Some forms may be attested, others may be neologisms, and others may be simply incorrect.
                    </StaticAlert>
                    {inflectionData.words.map((wordData) => (
                        <div key={wordData.qwid}>
                            <table className="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Part</th>
                                        <th>Inflected form</th>
                                        <th>Tengwar</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {wordData.forms.map((form, idx) => (
                                        <tr key={idx}>
                                            <td>{form.tag}</td>
                                            <td>{form.forms.map((f) => <div key={f}>{f}</div>)}</td>
                                            <td>{form.forms.map((f) => <div key={f}><Tengwar text={f} mode="quenya" transcribe={true} /></div>)}</td>
                                        </tr>
                                    ))}
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td colSpan={3} className="text-end">
                                            <a className="btn btn-secondary" href={ungweUrl} target="_blank" rel="noreferrer">
                                                More on Quettali (3<sup>rd</sup> party)
                                            </a>
                                            <a className="btn btn-primary ms-2" href="#" onClick={_onDialogDismiss}>
                                                Close
                                            </a>
                                        </td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    ))}
                </div>
            )}
        </Dialog>
    );
};

export default withPropInjection(UngweInflectionsDialog, {
    inflectionApi: DI.InflectionApi,
});
