<?php

namespace Tests\Unit\Repositories;

use App\Models\Account;
use App\Models\ForumDiscussion;
use App\Models\ForumGroup;
use App\Models\ForumPost;
use App\Models\ForumPostLike;
use App\Models\ForumThread;
use App\Repositories\DiscussRepository;
use App\Repositories\ValueObjects\ForumThreadForEntityValue;
use Auth;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Queue;
use Tests\TestCase;
use Tests\Unit\Traits\CanCreateGloss;

class DiscussRepositoryTest extends TestCase
{
    use CanCreateGloss {
        CanCreateGloss::setUp as setUpGlosses;
    }
    use DatabaseTransactions; // ; <-- remedies Visual Studio Code colouring bug

    private $_repository;

    protected function setUp(): void
    {
        parent::setUp();
        $this->setUpGlosses();
        Queue::fake();

        $this->_repository = resolve(DiscussRepository::class);
    }

    public function test_get_thread_for_entity_should_be_null()
    {
        $thread = $this->_repository->getThreadDataForEntity('glossv', 1);
        $this->assertEquals(null, $thread);
    }

    public function test_get_thread_for_entity_should_be_new()
    {
        extract($this->createGloss(__FUNCTION__));
        $gloss = $this->getRepository()->saveGloss($word, $sense, $gloss, $translations, $keywords, $details);

        $threadData = $this->_repository->getThreadDataForEntity('glossv', $gloss->latest_gloss_version_id, true);
        $this->assertTrue($threadData instanceof ForumThreadForEntityValue);

        $t = $threadData->getThread();
        $this->assertTrue($t instanceof ForumThread);
        $this->assertEquals('glossv', $t->entity_type);
        $this->assertEquals($gloss->latest_gloss_version_id, $t->entity_id);
        $this->assertEquals(Auth::user()->id, $t->account_id);
        $this->assertEquals(
            ForumGroup::where('role', 'glossv')->first()->id,
            $t->forum_group_id
        );
        $this->assertEquals(
            0,
            $t->id
        );
    }

    public function test_get_thread_for_entity_should_be_existing()
    {
        extract($this->createGloss(__FUNCTION__));
        $gloss = $this->getRepository()->saveGloss($word, $sense, $gloss, $translations, $keywords, $details);

        $threadData = $this->_repository->getThreadDataForEntity('glossv', $gloss->latest_gloss_version_id, true);
        $t = $threadData->getThread();
        $t->subject = 'Subject';

        $existingThreadData = $this->_repository->getThreadDataForEntity('glossv', $gloss->latest_gloss_version_id, true);
        $this->assertTrue($existingThreadData instanceof ForumThreadForEntityValue);

        $t = $existingThreadData->getThread();
        $this->assertTrue($t instanceof ForumThread);
        $this->assertEquals('glossv', $t->entity_type);
        $this->assertEquals($gloss->latest_gloss_version_id, $t->entity_id);
        $this->assertEquals(Auth::user()->id, $t->account_id);
        $this->assertEquals(
            ForumGroup::where('role', 'glossv')->first()->id,
            $t->forum_group_id
        );
        $this->assertEquals(
            $threadData->getThread()->id,
            $t->id
        );
    }

    public function test_can_save_post()
    {
        extract($this->createGloss(__FUNCTION__));
        $gloss = $this->getRepository()->saveGloss($word, $sense, $gloss, $translations, $keywords, $details);

        $threadData = $this->_repository->getThreadDataForEntity('glossv', $gloss->latest_gloss_version_id, true);
        $t = $threadData->getThread();
        $t->subject = 'Subject';

        $account = Auth::user();

        $data = [
            'content' => 'This is a test post generated by a unit test.',
        ];
        $post = new ForumPost($data);
        $this->_repository->savePost($post, $t, $account);

        $this->assertNotEquals(0, $post->id);
        foreach ($data as $key => $value) {
            $this->assertEquals($value, $post->{$key});
        }
        $this->assertEquals($t->id, $post->forum_thread_id);
        $this->assertEquals($t->number_of_posts, $t->forum_posts->count());
    }

    public function test_can_save_like_post()
    {
        $account = Auth::user();
        $post = $this->createPostForUnitTest($account);
        $like = $this->_repository->saveLike($post->id, $account);

        $post->refresh();

        $this->assertTrue($like->id !== 0);
        $this->assertEquals(1, $post->number_of_likes);
        $this->assertEquals(1, $post->forum_thread->number_of_likes);
    }

    public function test_can_toggle_like_post()
    {
        $account = Auth::user();
        $post = $this->createPostForUnitTest($account);

        $like = $this->_repository->saveLike($post->id, $account);
        $this->assertTrue($like instanceof ForumPostLike);

        $like = $this->_repository->saveLike($post->id, $account);
        $this->assertNull($like);

        $post->refresh();

        $this->assertEquals(0, $post->number_of_likes);
        $this->assertEquals(0, $post->forum_thread->number_of_likes);
    }

    public function test_can_like_post_count_ignores_deleted_posts()
    {
        $account = Auth::user();
        $post = $this->createPostForUnitTest($account);

        $like = $this->_repository->saveLike($post->id, $account);
        $this->assertTrue($like instanceof ForumPostLike);

        $post->refresh();

        $this->assertEquals(1, $post->number_of_likes);
        $this->assertEquals(1, $post->forum_thread->number_of_likes);

        $this->_repository->deletePost($post);

        $post->refresh();

        $this->assertEquals(1, $post->is_deleted);
        $this->assertEquals(1, $post->number_of_likes);
        $this->assertEquals(0, $post->forum_thread->number_of_likes);
    }

    private function createPostForUnitTest(Account $account)
    {
        $entity = ForumDiscussion::create([
            'account_id' => $account->id,
        ]);

        $threadData = $this->_repository->getThreadDataForEntity($entity, null, true);
        $thread = $threadData->getThread();
        $thread->subject = 'Test';
        $post = new ForumPost([
            'content' => 'This is a test post generated by a unit test.',
        ]);

        $this->_repository->savePost($post, $thread, $account);

        return $post;
    }
}
