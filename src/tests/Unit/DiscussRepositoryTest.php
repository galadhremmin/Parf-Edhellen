<?php

namespace Tests\Unit;

use Tests\TestCase;

use Auth;
use DB;

use Tests\Unit\Traits\{
    CanCreateGloss
};

use App\Repositories\DiscussRepository;
use App\Models\{
    ForumGroup,
    ForumPost,
    ForumThread
};

class DiscussRepositoryTest extends TestCase
{
    use CanCreateGloss {
        CanCreateGloss::setUp as setUpGlosses;
        CanCreateGloss::tearDown as tearDownGlosses;
    } // ; <-- remedies Visual Studio Code colouring bug
    
    private $_repository;

    protected function setUp() 
    {
        parent::setUp();
        DB::beginTransaction();
        $this->setUpGlosses();

        $this->_repository = resolve(DiscussRepository::class);
    }

    protected function tearDown()
    {
        $this->tearDownGlosses();
        DB::rollBack();
        parent::tearDown();
    }

    public function testGetThreadForEntityShouldBeNull()
    {
        $thread = $this->_repository->getThreadForEntity('gloss', 1);
        $this->assertEquals(null, $thread);
    }

    public function testGetThreadForEntityShouldBeNew()
    {
        extract( $this->createGloss(__FUNCTION__) );
        $gloss = $this->getRepository()->saveGloss($word, $sense, $gloss, $translations, $keywords, $details);

        $thread = $this->_repository->getThreadForEntity('gloss', $gloss->id, true);
        $this->assertTrue(is_array($thread));
        $this->assertTrue(isset($thread['thread']));

        $t = &$thread['thread'];
        $this->assertTrue($t instanceof ForumThread);
        $this->assertEquals('gloss', $t->entity_type);
        $this->assertEquals($gloss->id, $t->entity_id);
        $this->assertEquals(Auth::user()->id, $t->account_id);
        $this->assertEquals(
            ForumGroup::where('role', 'gloss')->first()->id,
            $t->forum_group_id
        );
        $this->assertEquals(
            0,
            $t->id
        );
    }

    public function testGetThreadForEntityShouldBeExisting()
    {
        extract( $this->createGloss(__FUNCTION__) );
        $gloss = $this->getRepository()->saveGloss($word, $sense, $gloss, $translations, $keywords, $details);

        $thread = $this->_repository->getThreadForEntity('gloss', $gloss->id, true);
        $t = &$thread['thread'];
        $t->subject = 'Subject';
        $t->save();

        $existingThread = $this->_repository->getThreadForEntity('gloss', $gloss->id, true);
        $this->assertTrue(is_array($existingThread));
        $this->assertTrue(isset($existingThread['thread']));

        $t = &$existingThread['thread'];
        $this->assertTrue($t instanceof ForumThread);
        $this->assertEquals('gloss', $t->entity_type);
        $this->assertEquals($gloss->id, $t->entity_id);
        $this->assertEquals(Auth::user()->id, $t->account_id);
        $this->assertEquals(
            ForumGroup::where('role', 'gloss')->first()->id,
            $t->forum_group_id
        );
        $this->assertEquals(
            $thread['thread']->id,
            $t->id
        );
    }

    public function testCanSavePost()
    {
        extract( $this->createGloss(__FUNCTION__) );
        $gloss = $this->getRepository()->saveGloss($word, $sense, $gloss, $translations, $keywords, $details);

        $thread = $this->_repository->getThreadForEntity('gloss', $gloss->id, true);
        $t = &$thread['thread'];
        $t->subject = 'Subject';
        $t->save();

        $account = Auth::user();

        $data = [
            'content' => 'This is a test post generated by a unit test.'
        ];
        $post = new ForumPost($data);
        $this->_repository->savePost($post, $t, $account);

        $this->assertNotEquals(0, $post->id);
        foreach ($data as $key => $value) {
            $this->assertEquals($value, $post->{$key});
        }
        $this->assertEquals($t->id, $post->forum_thread_id);
        $this->assertEquals($t->number_of_posts, $t->forum_posts->count());
    }
}
